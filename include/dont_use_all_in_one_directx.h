// DirectX Stuff

	typedef enum DXGI_FORMAT
	{
		DXGI_FORMAT_UNKNOWN	                    = 0,
		DXGI_FORMAT_R32G32B32A32_TYPELESS       = 1,
		DXGI_FORMAT_R32G32B32A32_FLOAT          = 2,
		DXGI_FORMAT_R32G32B32A32_UINT           = 3,
		DXGI_FORMAT_R32G32B32A32_SINT           = 4,
		DXGI_FORMAT_R32G32B32_TYPELESS          = 5,
		DXGI_FORMAT_R32G32B32_FLOAT             = 6,
		DXGI_FORMAT_R32G32B32_UINT              = 7,
		DXGI_FORMAT_R32G32B32_SINT              = 8,
		DXGI_FORMAT_R16G16B16A16_TYPELESS       = 9,
		DXGI_FORMAT_R16G16B16A16_FLOAT          = 10,
		DXGI_FORMAT_R16G16B16A16_UNORM          = 11,
		DXGI_FORMAT_R16G16B16A16_UINT           = 12,
		DXGI_FORMAT_R16G16B16A16_SNORM          = 13,
		DXGI_FORMAT_R16G16B16A16_SINT           = 14,
		DXGI_FORMAT_R32G32_TYPELESS             = 15,
		DXGI_FORMAT_R32G32_FLOAT                = 16,
		DXGI_FORMAT_R32G32_UINT                 = 17,
		DXGI_FORMAT_R32G32_SINT                 = 18,
		DXGI_FORMAT_R32G8X24_TYPELESS           = 19,
		DXGI_FORMAT_D32_FLOAT_S8X24_UINT        = 20,
		DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS    = 21,
		DXGI_FORMAT_X32_TYPELESS_G8X24_UINT     = 22,
		DXGI_FORMAT_R10G10B10A2_TYPELESS        = 23,
		DXGI_FORMAT_R10G10B10A2_UNORM           = 24,
		DXGI_FORMAT_R10G10B10A2_UINT            = 25,
		DXGI_FORMAT_R11G11B10_FLOAT             = 26,
		DXGI_FORMAT_R8G8B8A8_TYPELESS           = 27,
		DXGI_FORMAT_R8G8B8A8_UNORM              = 28,
		DXGI_FORMAT_R8G8B8A8_UNORM_SRGB         = 29,
		DXGI_FORMAT_R8G8B8A8_UINT               = 30,
		DXGI_FORMAT_R8G8B8A8_SNORM              = 31,
		DXGI_FORMAT_R8G8B8A8_SINT               = 32,
		DXGI_FORMAT_R16G16_TYPELESS             = 33,
		DXGI_FORMAT_R16G16_FLOAT                = 34,
		DXGI_FORMAT_R16G16_UNORM                = 35,
		DXGI_FORMAT_R16G16_UINT                 = 36,
		DXGI_FORMAT_R16G16_SNORM                = 37,
		DXGI_FORMAT_R16G16_SINT                 = 38,
		DXGI_FORMAT_R32_TYPELESS                = 39,
		DXGI_FORMAT_D32_FLOAT                   = 40,
		DXGI_FORMAT_R32_FLOAT                   = 41,
		DXGI_FORMAT_R32_UINT                    = 42,
		DXGI_FORMAT_R32_SINT                    = 43,
		DXGI_FORMAT_R24G8_TYPELESS              = 44,
		DXGI_FORMAT_D24_UNORM_S8_UINT           = 45,
		DXGI_FORMAT_R24_UNORM_X8_TYPELESS       = 46,
		DXGI_FORMAT_X24_TYPELESS_G8_UINT        = 47,
		DXGI_FORMAT_R8G8_TYPELESS               = 48,
		DXGI_FORMAT_R8G8_UNORM                  = 49,
		DXGI_FORMAT_R8G8_UINT                   = 50,
		DXGI_FORMAT_R8G8_SNORM                  = 51,
		DXGI_FORMAT_R8G8_SINT                   = 52,
		DXGI_FORMAT_R16_TYPELESS                = 53,
		DXGI_FORMAT_R16_FLOAT                   = 54,
		DXGI_FORMAT_D16_UNORM                   = 55,
		DXGI_FORMAT_R16_UNORM                   = 56,
		DXGI_FORMAT_R16_UINT                    = 57,
		DXGI_FORMAT_R16_SNORM                   = 58,
		DXGI_FORMAT_R16_SINT                    = 59,
		DXGI_FORMAT_R8_TYPELESS                 = 60,
		DXGI_FORMAT_R8_UNORM                    = 61,
		DXGI_FORMAT_R8_UINT                     = 62,
		DXGI_FORMAT_R8_SNORM                    = 63,
		DXGI_FORMAT_R8_SINT                     = 64,
		DXGI_FORMAT_A8_UNORM                    = 65,
		DXGI_FORMAT_R1_UNORM                    = 66,
		DXGI_FORMAT_R9G9B9E5_SHAREDEXP          = 67,
		DXGI_FORMAT_R8G8_B8G8_UNORM             = 68,
		DXGI_FORMAT_G8R8_G8B8_UNORM             = 69,
		DXGI_FORMAT_BC1_TYPELESS                = 70,
		DXGI_FORMAT_BC1_UNORM                   = 71,
		DXGI_FORMAT_BC1_UNORM_SRGB              = 72,
		DXGI_FORMAT_BC2_TYPELESS                = 73,
		DXGI_FORMAT_BC2_UNORM                   = 74,
		DXGI_FORMAT_BC2_UNORM_SRGB              = 75,
		DXGI_FORMAT_BC3_TYPELESS                = 76,
		DXGI_FORMAT_BC3_UNORM                   = 77,
		DXGI_FORMAT_BC3_UNORM_SRGB              = 78,
		DXGI_FORMAT_BC4_TYPELESS                = 79,
		DXGI_FORMAT_BC4_UNORM                   = 80,
		DXGI_FORMAT_BC4_SNORM                   = 81,
		DXGI_FORMAT_BC5_TYPELESS                = 82,
		DXGI_FORMAT_BC5_UNORM                   = 83,
		DXGI_FORMAT_BC5_SNORM                   = 84,
		DXGI_FORMAT_B5G6R5_UNORM                = 85,
		DXGI_FORMAT_B5G5R5A1_UNORM              = 86,
		DXGI_FORMAT_B8G8R8A8_UNORM              = 87,
		DXGI_FORMAT_B8G8R8X8_UNORM              = 88,
		DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM  = 89,
		DXGI_FORMAT_B8G8R8A8_TYPELESS           = 90,
		DXGI_FORMAT_B8G8R8A8_UNORM_SRGB         = 91,
		DXGI_FORMAT_B8G8R8X8_TYPELESS           = 92,
		DXGI_FORMAT_B8G8R8X8_UNORM_SRGB         = 93,
		DXGI_FORMAT_BC6H_TYPELESS               = 94,
		DXGI_FORMAT_BC6H_UF16                   = 95,
		DXGI_FORMAT_BC6H_SF16                   = 96,
		DXGI_FORMAT_BC7_TYPELESS                = 97,
		DXGI_FORMAT_BC7_UNORM                   = 98,
		DXGI_FORMAT_BC7_UNORM_SRGB              = 99,
		DXGI_FORMAT_AYUV                        = 100,
		DXGI_FORMAT_Y410                        = 101,
		DXGI_FORMAT_Y416                        = 102,
		DXGI_FORMAT_NV12                        = 103,
		DXGI_FORMAT_P010                        = 104,
		DXGI_FORMAT_P016                        = 105,
		DXGI_FORMAT_420_OPAQUE                  = 106,
		DXGI_FORMAT_YUY2                        = 107,
		DXGI_FORMAT_Y210                        = 108,
		DXGI_FORMAT_Y216                        = 109,
		DXGI_FORMAT_NV11                        = 110,
		DXGI_FORMAT_AI44                        = 111,
		DXGI_FORMAT_IA44                        = 112,
		DXGI_FORMAT_P8                          = 113,
		DXGI_FORMAT_A8P8                        = 114,
		DXGI_FORMAT_B4G4R4A4_UNORM              = 115,

		DXGI_FORMAT_P208                        = 130,
		DXGI_FORMAT_V208                        = 131,
		DXGI_FORMAT_V408                        = 132,


		DXGI_FORMAT_FORCE_UINT                  = 0xffffffff
	} DXGI_FORMAT;


	typedef enum D3D_PRIMITIVE_TOPOLOGY {
		D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
		D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
		D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2,
		D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
		D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
		D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
		D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
		D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
		D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
		D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
		D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
		D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
		D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
		D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
		D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
		D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
		D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
		D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
		D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
		D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
		D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
		D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
		D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
		D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
		D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
		D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
		D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
		D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
		D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
		D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
		D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
		D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
		D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
		D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
		D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
		D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
		D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
		D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
		D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
		D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
		D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
		D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64,
		D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
		D3D10_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
		D3D10_PRIMITIVE_TOPOLOGY_LINELIST = 2,
		D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
		D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
		D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
		D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
		D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
		D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
		D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
		D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
		D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
		D3D11_PRIMITIVE_TOPOLOGY_LINELIST = 2,
		D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
		D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
		D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
		D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
		D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
		D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
		D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
		D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
		D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
		D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
		D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
		D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
		D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
		D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
		D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
		D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
		D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
		D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
		D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
		D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
		D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
		D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
		D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
		D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
		D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
		D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
		D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
		D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
		D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
		D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
		D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
		D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
		D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
		D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
		D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
		D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
		D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
		D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
		D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
	} D3D_PRIMITIVE_TOPOLOGY;
	typedef enum D3D_SRV_DIMENSION_T {
		D3D_SRV_DIMENSION_UNKNOWN = 0,
		D3D_SRV_DIMENSION_BUFFER = 1,
		D3D_SRV_DIMENSION_TEXTURE1D = 2,
		D3D_SRV_DIMENSION_TEXTURE1DARRAY = 3,
		D3D_SRV_DIMENSION_TEXTURE2D = 4,
		D3D_SRV_DIMENSION_TEXTURE2DARRAY = 5,
		D3D_SRV_DIMENSION_TEXTURE2DMS = 6,
		D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
		D3D_SRV_DIMENSION_TEXTURE3D = 8,
		D3D_SRV_DIMENSION_TEXTURECUBE = 9,
		D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
		D3D_SRV_DIMENSION_BUFFEREX = 11,
		D3D10_SRV_DIMENSION_UNKNOWN,
		D3D10_SRV_DIMENSION_BUFFER,
		D3D10_SRV_DIMENSION_TEXTURE1D,
		D3D10_SRV_DIMENSION_TEXTURE1DARRAY,
		D3D10_SRV_DIMENSION_TEXTURE2D,
		D3D10_SRV_DIMENSION_TEXTURE2DARRAY,
		D3D10_SRV_DIMENSION_TEXTURE2DMS,
		D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY,
		D3D10_SRV_DIMENSION_TEXTURE3D,
		D3D10_SRV_DIMENSION_TEXTURECUBE,
		D3D10_1_SRV_DIMENSION_UNKNOWN,
		D3D10_1_SRV_DIMENSION_BUFFER,
		D3D10_1_SRV_DIMENSION_TEXTURE1D,
		D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY,
		D3D10_1_SRV_DIMENSION_TEXTURE2D,
		D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY,
		D3D10_1_SRV_DIMENSION_TEXTURE2DMS,
		D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY,
		D3D10_1_SRV_DIMENSION_TEXTURE3D,
		D3D10_1_SRV_DIMENSION_TEXTURECUBE,
		D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY,
		D3D11_SRV_DIMENSION_UNKNOWN,
		D3D11_SRV_DIMENSION_BUFFER,
		D3D11_SRV_DIMENSION_TEXTURE1D,
		D3D11_SRV_DIMENSION_TEXTURE1DARRAY,
		D3D11_SRV_DIMENSION_TEXTURE2D,
		D3D11_SRV_DIMENSION_TEXTURE2DARRAY,
		D3D11_SRV_DIMENSION_TEXTURE2DMS,
		D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY,
		D3D11_SRV_DIMENSION_TEXTURE3D,
		D3D11_SRV_DIMENSION_TEXTURECUBE,
		D3D11_SRV_DIMENSION_TEXTURECUBEARRAY,
		D3D11_SRV_DIMENSION_BUFFEREX
	} D3D_SRV_DIMENSION;
	typedef D3D_PRIMITIVE_TOPOLOGY D3D11_PRIMITIVE_TOPOLOGY;
	typedef RECT D3D11_RECT;
	typedef enum D3D11_FEATURE {
		D3D11_FEATURE_THREADING = 0,
		D3D11_FEATURE_DOUBLES = 1,
		D3D11_FEATURE_FORMAT_SUPPORT = 2,
		D3D11_FEATURE_FORMAT_SUPPORT2 = 3,
		D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 4,
		D3D11_FEATURE_D3D11_OPTIONS = 5,
		D3D11_FEATURE_ARCHITECTURE_INFO = 6,
		D3D11_FEATURE_D3D9_OPTIONS = 7,
		D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = 8,
		D3D11_FEATURE_D3D9_SHADOW_SUPPORT = 9,
		D3D11_FEATURE_D3D11_OPTIONS1 = 10,
		D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = 11,
		D3D11_FEATURE_MARKER_SUPPORT = 12,
		D3D11_FEATURE_D3D9_OPTIONS1 = 13,
		D3D11_FEATURE_D3D11_OPTIONS2 = 14,
		D3D11_FEATURE_D3D11_OPTIONS3 = 15,
		D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 16,
		D3D11_FEATURE_D3D11_OPTIONS4 = 17,
		D3D11_FEATURE_SHADER_CACHE = 18,
		D3D11_FEATURE_D3D11_OPTIONS5 = 19
	} D3D11_FEATURE;
	typedef enum D3D_FEATURE_LEVEL {
		D3D_FEATURE_LEVEL_1_0_GENERIC,
		D3D_FEATURE_LEVEL_1_0_CORE,
		D3D_FEATURE_LEVEL_9_1,
		D3D_FEATURE_LEVEL_9_2,
		D3D_FEATURE_LEVEL_9_3,
		D3D_FEATURE_LEVEL_10_0,
		D3D_FEATURE_LEVEL_10_1,
		D3D_FEATURE_LEVEL_11_0,
		D3D_FEATURE_LEVEL_11_1,
		D3D_FEATURE_LEVEL_12_0,
		D3D_FEATURE_LEVEL_12_1,
		D3D_FEATURE_LEVEL_12_2
	} D3D_FEATURE_LEVEL;
	typedef enum D3D_DRIVER_TYPE {
		D3D_DRIVER_TYPE_UNKNOWN = 0,
		D3D_DRIVER_TYPE_HARDWARE,
		D3D_DRIVER_TYPE_REFERENCE,
		D3D_DRIVER_TYPE_NULL,
		D3D_DRIVER_TYPE_SOFTWARE,
		D3D_DRIVER_TYPE_WARP
	} D3D_DRIVER_TYPE;
	typedef enum D3D11_MAP {
		D3D11_MAP_READ = 1,
		D3D11_MAP_WRITE = 2,
		D3D11_MAP_READ_WRITE = 3,
		D3D11_MAP_WRITE_DISCARD = 4,
		D3D11_MAP_WRITE_NO_OVERWRITE = 5
	} D3D11_MAP;
	typedef enum D3D11_RESOURCE_DIMENSION {
		D3D11_RESOURCE_DIMENSION_UNKNOWN = 0,
		D3D11_RESOURCE_DIMENSION_BUFFER = 1,
		D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
		D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
		D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4
	} D3D11_RESOURCE_DIMENSION;
	typedef enum D3D11_DEVICE_CONTEXT_TYPE {
		D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
		D3D11_DEVICE_CONTEXT_DEFERRED = 1
	} D3D11_DEVICE_CONTEXT_TYPE;
	typedef struct D3D11_MAPPED_SUBRESOURCE {
		void *pData;
		UINT RowPitch;
		UINT DepthPitch;
	} D3D11_MAPPED_SUBRESOURCE;
	typedef struct D3D11_VIEWPORT {
		FLOAT TopLeftX;
		FLOAT TopLeftY;
		FLOAT Width;
		FLOAT Height;
		FLOAT MinDepth;
		FLOAT MaxDepth;
	} D3D11_VIEWPORT;
	typedef struct D3D11_BOX {
		UINT left;
		UINT top;
		UINT front;
		UINT right;
		UINT bottom;
		UINT back;
	} D3D11_BOX;
	typedef struct DXGI_SAMPLE_DESC {
		UINT Count;
		UINT Quality;
	} DXGI_SAMPLE_DESC;
	typedef enum D3D11_USAGE {
		D3D11_USAGE_DEFAULT = 0,
		D3D11_USAGE_IMMUTABLE = 1,
		D3D11_USAGE_DYNAMIC = 2,
		D3D11_USAGE_STAGING = 3
	} D3D11_USAGE;
	typedef enum D3D11_BIND_FLAG {
		D3D11_BIND_VERTEX_BUFFER = 0x1L,
		D3D11_BIND_INDEX_BUFFER = 0x2L,
		D3D11_BIND_CONSTANT_BUFFER = 0x4L,
		D3D11_BIND_SHADER_RESOURCE = 0x8L,
		D3D11_BIND_STREAM_OUTPUT = 0x10L,
		D3D11_BIND_RENDER_TARGET = 0x20L,
		D3D11_BIND_DEPTH_STENCIL = 0x40L,
		D3D11_BIND_UNORDERED_ACCESS = 0x80L,
		D3D11_BIND_DECODER = 0x200L,
		D3D11_BIND_VIDEO_ENCODER = 0x400L
	} D3D11_BIND_FLAG;
	typedef enum D3D11_UAV_DIMENSION {
		D3D11_UAV_DIMENSION_UNKNOWN = 0,
		D3D11_UAV_DIMENSION_BUFFER = 1,
		D3D11_UAV_DIMENSION_TEXTURE1D = 2,
		D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
		D3D11_UAV_DIMENSION_TEXTURE2D = 4,
		D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
		D3D11_UAV_DIMENSION_TEXTURE3D = 8
	} D3D11_UAV_DIMENSION;
	typedef enum D3D11_RTV_DIMENSION {
		D3D11_RTV_DIMENSION_UNKNOWN = 0,
		D3D11_RTV_DIMENSION_BUFFER = 1,
		D3D11_RTV_DIMENSION_TEXTURE1D = 2,
		D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
		D3D11_RTV_DIMENSION_TEXTURE2D = 4,
		D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
		D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
		D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
		D3D11_RTV_DIMENSION_TEXTURE3D = 8
	} D3D11_RTV_DIMENSION;
	typedef enum D3D11_DSV_DIMENSION {
		D3D11_DSV_DIMENSION_UNKNOWN = 0,
		D3D11_DSV_DIMENSION_TEXTURE1D = 1,
		D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
		D3D11_DSV_DIMENSION_TEXTURE2D = 3,
		D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
		D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
		D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
	} D3D11_DSV_DIMENSION;
	typedef enum D3D11_FILTER {
		D3D11_FILTER_MIN_MAG_MIP_POINT = 0x0,
		D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
		D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
		D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
		D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
		D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
		D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
		D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
		D3D11_FILTER_ANISOTROPIC = 0x55,
		D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
		D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
		D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
		D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
		D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
		D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
		D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
		D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
		D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
		D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
		D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
		D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
		D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
		D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
		D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
		D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
		D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
		D3D11_FILTER_MINIMUM_ANISOTROPIC = 0x155,
		D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
		D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
		D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
		D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
		D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
		D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
		D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
		D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
		D3D11_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
	} D3D11_FILTER;
	typedef enum D3D11_CPU_ACCESS_FLAG {
		D3D11_CPU_ACCESS_WRITE = 0x10000L,
		D3D11_CPU_ACCESS_READ = 0x20000L
	} D3D11_CPU_ACCESS_FLAG;
	typedef enum D3D11_TEXTURE_ADDRESS_MODE {
		D3D11_TEXTURE_ADDRESS_WRAP = 1,
		D3D11_TEXTURE_ADDRESS_MIRROR = 2,
		D3D11_TEXTURE_ADDRESS_CLAMP = 3,
		D3D11_TEXTURE_ADDRESS_BORDER = 4,
		D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5
	} D3D11_TEXTURE_ADDRESS_MODE;
	typedef enum D3D11_QUERY {
		D3D11_QUERY_EVENT = 0,
		D3D11_QUERY_OCCLUSION = 1,
		D3D11_QUERY_TIMESTAMP = 2,
		D3D11_QUERY_TIMESTAMP_DISJOINT = 3,
		D3D11_QUERY_PIPELINE_STATISTICS = 4,
		D3D11_QUERY_OCCLUSION_PREDICATE = 5,
		D3D11_QUERY_SO_STATISTICS = 6,
		D3D11_QUERY_SO_OVERFLOW_PREDICATE = 7,
		D3D11_QUERY_SO_STATISTICS_STREAM0 = 8,
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 9,
		D3D11_QUERY_SO_STATISTICS_STREAM1 = 10,
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 11,
		D3D11_QUERY_SO_STATISTICS_STREAM2 = 12,
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 13,
		D3D11_QUERY_SO_STATISTICS_STREAM3 = 14,
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 15
	} D3D11_QUERY;
	typedef struct D3D11_SUBRESOURCE_DATA {
		const void *pSysMem;
		UINT SysMemPitch;
		UINT SysMemSlicePitch;
	} D3D11_SUBRESOURCE_DATA;
	typedef struct D3D11_TEXTURE2D_DESC {
		UINT             Width;
		UINT             Height;
		UINT             MipLevels;
		UINT             ArraySize;
		DXGI_FORMAT      Format;
		DXGI_SAMPLE_DESC SampleDesc;
		D3D11_USAGE      Usage;
		UINT             BindFlags;
		UINT             CPUAccessFlags;
		UINT             MiscFlags;
	} D3D11_TEXTURE2D_DESC;

	typedef struct D3D11_TEXTURE3D_DESC {
		UINT Width;
		UINT Height;
		UINT Depth;
		UINT MipLevels;
		DXGI_FORMAT Format;
		D3D11_USAGE Usage;
		UINT BindFlags;
		UINT CPUAccessFlags;
		UINT MiscFlags;
	} D3D11_TEXTURE3D_DESC;

	
	typedef struct D3D11_BUFFER_DESC {
		UINT ByteWidth;
		D3D11_USAGE Usage;
		UINT BindFlags;
		UINT CPUAccessFlags;
		UINT MiscFlags;
		UINT StructureByteStride;
	} D3D11_BUFFER_DESC;

	typedef struct D3D11_TEXTURE1D_DESC {
		UINT Width;
		UINT MipLevels;
		UINT ArraySize;
		DXGI_FORMAT Format;
		D3D11_USAGE Usage;
		UINT BindFlags;
		UINT CPUAccessFlags;
		UINT MiscFlags;
	} D3D11_TEXTURE1D_DESC;
	
	
	typedef struct D3D11_BUFFER_SRV {
		union {
			UINT FirstElement;
			UINT ElementOffset;
		};
		union {
			UINT NumElements;
			UINT ElementWidth;
		};
    } D3D11_BUFFER_SRV;
	
	typedef D3D_SRV_DIMENSION D3D11_SRV_DIMENSION;
	typedef struct D3D11_TEX1D_SRV {
		UINT MostDetailedMip;
		UINT MipLevels;
	} D3D11_TEX1D_SRV;
	
	typedef struct D3D11_TEX1D_ARRAY_SRV {
		UINT MostDetailedMip;
		UINT MipLevels;
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX1D_ARRAY_SRV;

	typedef struct D3D11_TEX2D_ARRAY_SRV {
		UINT MostDetailedMip;
		UINT MipLevels;
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX2D_ARRAY_SRV;
	typedef struct D3D11_TEX2D_SRV {
		UINT MostDetailedMip;
		UINT MipLevels;
	} D3D11_TEX2D_SRV;
	typedef struct D3D11_TEX2DMS_ARRAY_SRV {
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX2DMS_ARRAY_SRV;
	typedef struct D3D11_TEX2DMS_SRV {
		UINT UnusedField_NothingToDefine;
	} D3D11_TEX2DMS_SRV;
	typedef struct D3D11_TEXCUBE_SRV {
		UINT MostDetailedMip;
		UINT MipLevels;
	} D3D11_TEXCUBE_SRV;
	typedef struct D3D11_TEX3D_SRV {
		UINT MostDetailedMip;
		UINT MipLevels;
	} D3D11_TEX3D_SRV;
	typedef struct D3D11_TEXCUBE_ARRAY_SRV {
		UINT MostDetailedMip;
		UINT MipLevels;
		UINT First2DArrayFace;
		UINT NumCubes;
	} D3D11_TEXCUBE_ARRAY_SRV;
	typedef struct D3D11_BUFFEREX_SRV {
		UINT FirstElement;
		UINT NumElements;
		UINT Flags;
	} D3D11_BUFFEREX_SRV;
	typedef struct D3D11_SHADER_RESOURCE_VIEW_DESC {
		DXGI_FORMAT Format;
		D3D11_SRV_DIMENSION ViewDimension;
		union {
			D3D11_BUFFER_SRV Buffer;
			D3D11_TEX1D_SRV Texture1D;
			D3D11_TEX1D_ARRAY_SRV Texture1DArray;
			D3D11_TEX2D_SRV Texture2D;
			D3D11_TEX2D_ARRAY_SRV Texture2DArray;
			D3D11_TEX2DMS_SRV Texture2DMS;
			D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
			D3D11_TEX3D_SRV Texture3D;
			D3D11_TEXCUBE_SRV TextureCube;
			D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
			D3D11_BUFFEREX_SRV BufferEx;
		};
	} D3D11_SHADER_RESOURCE_VIEW_DESC;
	
	typedef struct D3D11_BUFFER_UAV {
		UINT FirstElement;
		UINT NumElements;
		UINT Flags;
	} D3D11_BUFFER_UAV;
	typedef struct D3D11_TEX1D_UAV {
		UINT MipSlice;
	} D3D11_TEX1D_UAV;
	typedef struct D3D11_TEX1D_ARRAY_UAV {
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX1D_ARRAY_UAV;
	typedef struct D3D11_TEX2D_UAV {
		UINT MipSlice;
	} D3D11_TEX2D_UAV;
	typedef struct D3D11_TEX2D_ARRAY_UAV {
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX2D_ARRAY_UAV;
	typedef struct D3D11_TEX3D_UAV {
		UINT MipSlice;
		UINT FirstWSlice;
		UINT WSize;
	} D3D11_TEX3D_UAV;
	typedef struct D3D11_UNORDERED_ACCESS_VIEW_DESC {
		DXGI_FORMAT Format;
		D3D11_UAV_DIMENSION ViewDimension;
		union {
			D3D11_BUFFER_UAV Buffer;
			D3D11_TEX1D_UAV Texture1D;
			D3D11_TEX1D_ARRAY_UAV Texture1DArray;
			D3D11_TEX2D_UAV Texture2D;
			D3D11_TEX2D_ARRAY_UAV Texture2DArray;
			D3D11_TEX3D_UAV Texture3D;
		};
	} D3D11_UNORDERED_ACCESS_VIEW_DESC;
	typedef struct D3D11_BUFFER_RTV {
		union {
			UINT FirstElement;
			UINT ElementOffset;
		};
		union {
			UINT NumElements;
			UINT ElementWidth;
		};
	} D3D11_BUFFER_RTV;
	typedef struct D3D11_TEX1D_ARRAY_RTV {
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX1D_ARRAY_RTV;
	typedef struct D3D11_TEX1D_RTV {
		UINT MipSlice;
	} D3D11_TEX1D_RTV;
	typedef struct D3D11_TEX2D_RTV {
		UINT MipSlice;
	} D3D11_TEX2D_RTV;
	typedef struct D3D11_TEX2D_ARRAY_RTV {
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX2D_ARRAY_RTV;	
	typedef struct D3D11_TEX2DMS_RTV {
		UINT UnusedField_NothingToDefine;
	} D3D11_TEX2DMS_RTV;
	typedef struct D3D11_TEX2DMS_ARRAY_RTV {
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX2DMS_ARRAY_RTV;
	typedef struct D3D11_TEX3D_RTV {
		UINT MipSlice;
		UINT FirstWSlice;
		UINT WSize;
	} D3D11_TEX3D_RTV;
	typedef struct D3D11_RENDER_TARGET_VIEW_DESC {
		DXGI_FORMAT Format;
		D3D11_RTV_DIMENSION ViewDimension;
		__C89_NAMELESS union {
			D3D11_BUFFER_RTV Buffer;
			D3D11_TEX1D_RTV Texture1D;
			D3D11_TEX1D_ARRAY_RTV Texture1DArray;
			D3D11_TEX2D_RTV Texture2D;
			D3D11_TEX2D_ARRAY_RTV Texture2DArray;
			D3D11_TEX2DMS_RTV Texture2DMS;
			D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
			D3D11_TEX3D_RTV Texture3D;
		};
	} D3D11_RENDER_TARGET_VIEW_DESC;
	typedef struct D3D11_TEX1D_DSV {
		UINT MipSlice;
	} D3D11_TEX1D_DSV;
	typedef struct D3D11_TEX1D_ARRAY_DSV {
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX1D_ARRAY_DSV;
	typedef struct D3D11_TEX2D_DSV {
		UINT MipSlice;
	} D3D11_TEX2D_DSV;
	typedef struct D3D11_TEX2D_ARRAY_DSV {
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX2D_ARRAY_DSV;
	typedef struct D3D11_TEX2DMS_DSV {
		UINT UnusedField_NothingToDefine;
	} D3D11_TEX2DMS_DSV;
	typedef struct D3D11_TEX2DMS_ARRAY_DSV {
		UINT FirstArraySlice;
		UINT ArraySize;
	} D3D11_TEX2DMS_ARRAY_DSV;
	typedef struct D3D11_DEPTH_STENCIL_VIEW_DESC {
		DXGI_FORMAT Format;
		D3D11_DSV_DIMENSION ViewDimension;
		UINT Flags;
		union {
			D3D11_TEX1D_DSV Texture1D;
			D3D11_TEX1D_ARRAY_DSV Texture1DArray;
			D3D11_TEX2D_DSV Texture2D;
			D3D11_TEX2D_ARRAY_DSV Texture2DArray;
			D3D11_TEX2DMS_DSV Texture2DMS;
			D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
		};
	} D3D11_DEPTH_STENCIL_VIEW_DESC;	
	typedef enum D3D11_INPUT_CLASSIFICATION {
		D3D11_INPUT_PER_VERTEX_DATA = 0,
		D3D11_INPUT_PER_INSTANCE_DATA = 1
	} D3D11_INPUT_CLASSIFICATION;
	typedef struct D3D11_INPUT_ELEMENT_DESC {
		LPCSTR SemanticName;
		UINT SemanticIndex;
		DXGI_FORMAT Format;
		UINT InputSlot;
		UINT AlignedByteOffset;
		D3D11_INPUT_CLASSIFICATION InputSlotClass;
		UINT InstanceDataStepRate;
	} D3D11_INPUT_ELEMENT_DESC;
	typedef struct D3D11_SO_DECLARATION_ENTRY {
		UINT Stream;
		LPCSTR SemanticName;
		UINT SemanticIndex;
		BYTE StartComponent;
		BYTE ComponentCount;
		BYTE OutputSlot;
	} D3D11_SO_DECLARATION_ENTRY;
	typedef enum D3D11_BLEND {
		D3D11_BLEND_ZERO = 1,
		D3D11_BLEND_ONE = 2,
		D3D11_BLEND_SRC_COLOR = 3,
		D3D11_BLEND_INV_SRC_COLOR = 4,
		D3D11_BLEND_SRC_ALPHA = 5,
		D3D11_BLEND_INV_SRC_ALPHA = 6,
		D3D11_BLEND_DEST_ALPHA = 7,
		D3D11_BLEND_INV_DEST_ALPHA = 8,
		D3D11_BLEND_DEST_COLOR = 9,
		D3D11_BLEND_INV_DEST_COLOR = 10,
		D3D11_BLEND_SRC_ALPHA_SAT = 11,
		D3D11_BLEND_BLEND_FACTOR = 14,
		D3D11_BLEND_INV_BLEND_FACTOR = 15,
		D3D11_BLEND_SRC1_COLOR = 16,
		D3D11_BLEND_INV_SRC1_COLOR = 17,
		D3D11_BLEND_SRC1_ALPHA = 18,
		D3D11_BLEND_INV_SRC1_ALPHA = 19
	} D3D11_BLEND;
	typedef enum D3D11_BLEND_OP {
		D3D11_BLEND_OP_ADD = 1,
		D3D11_BLEND_OP_SUBTRACT = 2,
		D3D11_BLEND_OP_REV_SUBTRACT = 3,
		D3D11_BLEND_OP_MIN = 4,
		D3D11_BLEND_OP_MAX = 5
	} D3D11_BLEND_OP;
	typedef struct D3D11_RENDER_TARGET_BLEND_DESC {
		WINBOOL BlendEnable;
		D3D11_BLEND SrcBlend;
		D3D11_BLEND DestBlend;
		D3D11_BLEND_OP BlendOp;
		D3D11_BLEND SrcBlendAlpha;
		D3D11_BLEND DestBlendAlpha;
		D3D11_BLEND_OP BlendOpAlpha;
		UINT8 RenderTargetWriteMask;
	} D3D11_RENDER_TARGET_BLEND_DESC;
	typedef struct D3D11_BLEND_DESC {
		WINBOOL AlphaToCoverageEnable;
		WINBOOL IndependentBlendEnable;
		D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8];
	} D3D11_BLEND_DESC;
	typedef enum D3D11_DEPTH_WRITE_MASK {
		D3D11_DEPTH_WRITE_MASK_ZERO = 0,
		D3D11_DEPTH_WRITE_MASK_ALL = 1
	} D3D11_DEPTH_WRITE_MASK;
	typedef enum D3D11_COMPARISON_FUNC {
		D3D11_COMPARISON_NEVER = 1,
		D3D11_COMPARISON_LESS = 2,
		D3D11_COMPARISON_EQUAL = 3,
		D3D11_COMPARISON_LESS_EQUAL = 4,
		D3D11_COMPARISON_GREATER = 5,
		D3D11_COMPARISON_NOT_EQUAL = 6,
		D3D11_COMPARISON_GREATER_EQUAL = 7,
		D3D11_COMPARISON_ALWAYS = 8
	} D3D11_COMPARISON_FUNC;
	typedef enum D3D11_STENCIL_OP {
		D3D11_STENCIL_OP_KEEP = 1,
		D3D11_STENCIL_OP_ZERO = 2,
		D3D11_STENCIL_OP_REPLACE = 3,
		D3D11_STENCIL_OP_INCR_SAT = 4,
		D3D11_STENCIL_OP_DECR_SAT = 5,
		D3D11_STENCIL_OP_INVERT = 6,
		D3D11_STENCIL_OP_INCR = 7,
		D3D11_STENCIL_OP_DECR = 8
	} D3D11_STENCIL_OP;
	typedef struct D3D11_DEPTH_STENCILOP_DESC {
		D3D11_STENCIL_OP StencilFailOp;
		D3D11_STENCIL_OP StencilDepthFailOp;
		D3D11_STENCIL_OP StencilPassOp;
		D3D11_COMPARISON_FUNC StencilFunc;
	} D3D11_DEPTH_STENCILOP_DESC;
	typedef struct D3D11_DEPTH_STENCIL_DESC {
		WINBOOL DepthEnable;
		D3D11_DEPTH_WRITE_MASK DepthWriteMask;
		D3D11_COMPARISON_FUNC DepthFunc;
		WINBOOL StencilEnable;
		UINT8 StencilReadMask;
		UINT8 StencilWriteMask;
		D3D11_DEPTH_STENCILOP_DESC FrontFace;
		D3D11_DEPTH_STENCILOP_DESC BackFace;
	} D3D11_DEPTH_STENCIL_DESC;
	typedef enum D3D11_FILL_MODE {
		D3D11_FILL_WIREFRAME = 2,
		D3D11_FILL_SOLID = 3
	} D3D11_FILL_MODE;
	typedef enum D3D11_CULL_MODE {
		D3D11_CULL_NONE = 1,
		D3D11_CULL_FRONT = 2,
		D3D11_CULL_BACK = 3
	} D3D11_CULL_MODE;
	typedef struct D3D11_RASTERIZER_DESC {
		D3D11_FILL_MODE FillMode;
		D3D11_CULL_MODE CullMode;
		WINBOOL FrontCounterClockwise;
		INT DepthBias;
		FLOAT DepthBiasClamp;
		FLOAT SlopeScaledDepthBias;
		WINBOOL DepthClipEnable;
		WINBOOL ScissorEnable;
		WINBOOL MultisampleEnable;
		WINBOOL AntialiasedLineEnable;
	} D3D11_RASTERIZER_DESC;
	typedef struct D3D11_SAMPLER_DESC {
		D3D11_FILTER Filter;
		D3D11_TEXTURE_ADDRESS_MODE AddressU;
		D3D11_TEXTURE_ADDRESS_MODE AddressV;
		D3D11_TEXTURE_ADDRESS_MODE AddressW;
		FLOAT MipLODBias;
		UINT MaxAnisotropy;
		D3D11_COMPARISON_FUNC ComparisonFunc;
		FLOAT BorderColor[4];
		FLOAT MinLOD;
		FLOAT MaxLOD;
	} D3D11_SAMPLER_DESC;
	typedef struct D3D11_QUERY_DESC {
		D3D11_QUERY Query;
		UINT MiscFlags;
	} D3D11_QUERY_DESC;
	typedef enum D3D11_COUNTER {
		D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000
	} D3D11_COUNTER;
	typedef struct D3D11_COUNTER_DESC {
		D3D11_COUNTER Counter;
		UINT MiscFlags;
	} D3D11_COUNTER_DESC;	
	typedef struct D3D11_COUNTER_INFO {
		D3D11_COUNTER LastDeviceDependentCounter;
		UINT NumSimultaneousCounters;
		UINT8 NumDetectableParallelUnits;
	} D3D11_COUNTER_INFO;
	
	typedef enum D3D11_COUNTER_TYPE {
		D3D11_COUNTER_TYPE_FLOAT32 = 0,
		D3D11_COUNTER_TYPE_UINT16 = 1,
		D3D11_COUNTER_TYPE_UINT32 = 2,
		D3D11_COUNTER_TYPE_UINT64 = 3
	} D3D11_COUNTER_TYPE;
	


	#define D3D11_SDK_VERSION 7
	typedef void * ID3D11Buffer;
	typedef void * ID3D11PixelShader;
	typedef void * ID3D11ClassInstance;
	typedef void * ID3D11SamplerState;
	typedef void * ID3D11VertexShader;
	typedef void * ID3D11InputLayout;
	typedef void * ID3D11GeometryShader;
	typedef void * ID3D11Asynchronous;
	typedef void * ID3D11Predicate;
	typedef void * ID3D11RenderTargetView;
	typedef void * ID3D11DepthStencilView;
	typedef void * ID3D11UnorderedAccessView;
	typedef void * ID3D11BlendState;
	typedef void * ID3D11DepthStencilState;
	typedef void * ID3D11RasterizerState;
	typedef void * ID3D11CommandList;
	typedef void * ID3D11HullShader;
	typedef void * ID3D11DomainShader;
	typedef void * ID3D11ComputeShader;
	typedef void * ID3D11Texture1D;
	typedef struct ID3D11Texture2D ID3D11Texture2D;
	typedef void * ID3D11Texture3D;
	typedef void * ID3D11ClassLinkage;
	typedef void * IDXGIAdapter;
	typedef void * ID3D11Query;
	typedef void * ID3D11Counter;
	typedef struct ID3D11Device ID3D11Device;
	typedef struct ID3D11ShaderResourceView ID3D11ShaderResourceView;
	typedef struct ID3D11Resource ID3D11Resource;

	typedef struct ID3D11DeviceContextVtbl ID3D11DeviceContext;
	typedef struct ID3D11DeviceContextVtbl {

		/*** IUnknown methods ***/
		HRESULT (STDMETHODCALLTYPE *QueryInterface)(
			 ID3D11DeviceContext *This,
			REFIID riid,
			void **ppvObject);

		ULONG (STDMETHODCALLTYPE *AddRef)(
			ID3D11DeviceContext *This);

		ULONG (STDMETHODCALLTYPE *Release)(
			ID3D11DeviceContext *This);

		/*** ID3D11DeviceChild methods ***/
		void (STDMETHODCALLTYPE *GetDevice)(
			ID3D11DeviceContext *This,
			ID3D11Device **ppDevice);

		HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
			ID3D11DeviceContext *This,
			REFGUID guid,
			UINT *pDataSize,
			void *pData);

		HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
			ID3D11DeviceContext *This,
			REFGUID guid,
			UINT DataSize,
			const void *pData);

		HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
			ID3D11DeviceContext *This,
			REFGUID guid,
			const IUnknown *pData);

		/*** ID3D11DeviceContext methods ***/
		void (STDMETHODCALLTYPE *VSSetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer *const *ppConstantBuffers);

		void (STDMETHODCALLTYPE *PSSetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView *const *ppShaderResourceViews);

		void (STDMETHODCALLTYPE *PSSetShader)(
			ID3D11DeviceContext *This,
			ID3D11PixelShader *pPixelShader,
			ID3D11ClassInstance *const *ppClassInstances,
			UINT NumClassInstances);

		void (STDMETHODCALLTYPE *PSSetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState *const *ppSamplers);

		void (STDMETHODCALLTYPE *VSSetShader)(
			ID3D11DeviceContext *This,
			ID3D11VertexShader *pVertexShader,
			ID3D11ClassInstance *const *ppClassInstances,
			UINT NumClassInstances);

		void (STDMETHODCALLTYPE *DrawIndexed)(
			ID3D11DeviceContext *This,
			UINT IndexCount,
			UINT StartIndexLocation,
			INT BaseVertexLocation);

		void (STDMETHODCALLTYPE *Draw)(
			ID3D11DeviceContext *This,
			UINT VertexCount,
			UINT StartVertexLocation);

		HRESULT (STDMETHODCALLTYPE *Map)(
			ID3D11DeviceContext *This,
			ID3D11Resource *pResource,
			UINT Subresource,
			D3D11_MAP MapType,
			UINT MapFlags,
			D3D11_MAPPED_SUBRESOURCE *pMappedResource);

		void (STDMETHODCALLTYPE *Unmap)(
			ID3D11DeviceContext *This,
			ID3D11Resource *pResource,
			UINT Subresource);

		void (STDMETHODCALLTYPE *PSSetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer *const *ppConstantBuffers);

		void (STDMETHODCALLTYPE *IASetInputLayout)(
			ID3D11DeviceContext *This,
			ID3D11InputLayout *pInputLayout);

		void (STDMETHODCALLTYPE *IASetVertexBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer *const *ppVertexBuffers,
			const UINT *pStrides,
			const UINT *pOffsets);

		void (STDMETHODCALLTYPE *IASetIndexBuffer)(
			ID3D11DeviceContext *This,
			ID3D11Buffer *pIndexBuffer,
			DXGI_FORMAT Format,
			UINT Offset);

		void (STDMETHODCALLTYPE *DrawIndexedInstanced)(
			ID3D11DeviceContext *This,
			UINT IndexCountPerInstance,
			UINT InstanceCount,
			UINT StartIndexLocation,
			INT BaseVertexLocation,
			UINT StartInstanceLocation);

		void (STDMETHODCALLTYPE *DrawInstanced)(
			ID3D11DeviceContext *This,
			UINT VertexCountPerInstance,
			UINT InstanceCount,
			UINT StartVertexLocation,
			UINT StartInstanceLocation);

		void (STDMETHODCALLTYPE *GSSetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer *const *ppConstantBuffers);

		void (STDMETHODCALLTYPE *GSSetShader)(
			ID3D11DeviceContext *This,
			ID3D11GeometryShader *pShader,
			ID3D11ClassInstance *const *ppClassInstances,
			UINT NumClassInstances);

		void (STDMETHODCALLTYPE *IASetPrimitiveTopology)(
			ID3D11DeviceContext *This,
			D3D11_PRIMITIVE_TOPOLOGY Topology);

		void (STDMETHODCALLTYPE *VSSetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView *const *ppShaderResourceViews);

		void (STDMETHODCALLTYPE *VSSetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState *const *ppSamplers);

		void (STDMETHODCALLTYPE *Begin)(
			ID3D11DeviceContext *This,
			ID3D11Asynchronous *pAsync);

		void (STDMETHODCALLTYPE *End)(
			ID3D11DeviceContext *This,
			ID3D11Asynchronous *pAsync);

		HRESULT (STDMETHODCALLTYPE *GetData)(
			ID3D11DeviceContext *This,
			ID3D11Asynchronous *pAsync,
			void *pData,
			UINT DataSize,
			UINT GetDataFlags);

		void (STDMETHODCALLTYPE *SetPredication)(
			ID3D11DeviceContext *This,
			ID3D11Predicate *pPredicate,
			WINBOOL PredicateValue);

		void (STDMETHODCALLTYPE *GSSetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView *const *ppShaderResourceViews);

		void (STDMETHODCALLTYPE *GSSetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState *const *ppSamplers);

		void (STDMETHODCALLTYPE *OMSetRenderTargets)(
			ID3D11DeviceContext *This,
			UINT NumViews,
			ID3D11RenderTargetView *const *ppRenderTargetViews,
			ID3D11DepthStencilView *pDepthStencilView);

		void (STDMETHODCALLTYPE *OMSetRenderTargetsAndUnorderedAccessViews)(
			ID3D11DeviceContext *This,
			UINT NumRTVs,
			ID3D11RenderTargetView *const *ppRenderTargetViews,
			ID3D11DepthStencilView *pDepthStencilView,
			UINT UAVStartSlot,
			UINT NumUAVs,
			ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,
			const UINT *pUAVInitialCounts);

		void (STDMETHODCALLTYPE *OMSetBlendState)(
			ID3D11DeviceContext *This,
			ID3D11BlendState *pBlendState,
			const FLOAT BlendFactor[4],
			UINT SampleMask);

		void (STDMETHODCALLTYPE *OMSetDepthStencilState)(
			ID3D11DeviceContext *This,
			ID3D11DepthStencilState *pDepthStencilState,
			UINT StencilRef);

		void (STDMETHODCALLTYPE *SOSetTargets)(
			ID3D11DeviceContext *This,
			UINT NumBuffers,
			ID3D11Buffer *const *ppSOTargets,
			const UINT *pOffsets);

		void (STDMETHODCALLTYPE *DrawAuto)(
			ID3D11DeviceContext *This);

		void (STDMETHODCALLTYPE *DrawIndexedInstancedIndirect)(
			ID3D11DeviceContext *This,
			ID3D11Buffer *pBufferForArgs,
			UINT AlignedByteOffsetForArgs);

		void (STDMETHODCALLTYPE *DrawInstancedIndirect)(
			ID3D11DeviceContext *This,
			ID3D11Buffer *pBufferForArgs,
			UINT AlignedByteOffsetForArgs);

		void (STDMETHODCALLTYPE *Dispatch)(
			ID3D11DeviceContext *This,
			UINT ThreadGroupCountX,
			UINT ThreadGroupCountY,
			UINT ThreadGroupCountZ);

		void (STDMETHODCALLTYPE *DispatchIndirect)(
			ID3D11DeviceContext *This,
			ID3D11Buffer *pBufferForArgs,
			UINT AlignedByteOffsetForArgs);

		void (STDMETHODCALLTYPE *RSSetState)(
			ID3D11DeviceContext *This,
			ID3D11RasterizerState *pRasterizerState);

		void (STDMETHODCALLTYPE *RSSetViewports)(
			ID3D11DeviceContext *This,
			UINT NumViewports,
			const D3D11_VIEWPORT *pViewports);

		void (STDMETHODCALLTYPE *RSSetScissorRects)(
			ID3D11DeviceContext *This,
			UINT NumRects,
			const D3D11_RECT *pRects);

		void (STDMETHODCALLTYPE *CopySubresourceRegion)(
			ID3D11DeviceContext *This,
			ID3D11Resource *pDstResource,
			UINT DstSubresource,
			UINT DstX,
			UINT DstY,
			UINT DstZ,
			ID3D11Resource *pSrcResource,
			UINT SrcSubresource,
			const D3D11_BOX *pSrcBox);

		void (STDMETHODCALLTYPE *CopyResource)(
			ID3D11DeviceContext *This,
			ID3D11Resource *pDstResource,
			ID3D11Resource *pSrcResource);

		void (STDMETHODCALLTYPE *UpdateSubresource)(
			ID3D11DeviceContext *This,
			ID3D11Resource *pDstResource,
			UINT DstSubresource,
			const D3D11_BOX *pDstBox,
			const void *pSrcData,
			UINT SrcRowPitch,
			UINT SrcDepthPitch);

		void (STDMETHODCALLTYPE *CopyStructureCount)(
			ID3D11DeviceContext *This,
			ID3D11Buffer *pDstBuffer,
			UINT DstAlignedByteOffset,
			ID3D11UnorderedAccessView *pSrcView);

		void (STDMETHODCALLTYPE *ClearRenderTargetView)(
			ID3D11DeviceContext *This,
			ID3D11RenderTargetView *pRenderTargetView,
			const FLOAT ColorRGBA[4]);

		void (STDMETHODCALLTYPE *ClearUnorderedAccessViewUint)(
			ID3D11DeviceContext *This,
			ID3D11UnorderedAccessView *pUnorderedAccessView,
			const UINT Values[4]);

		void (STDMETHODCALLTYPE *ClearUnorderedAccessViewFloat)(
			ID3D11DeviceContext *This,
			ID3D11UnorderedAccessView *pUnorderedAccessView,
			const FLOAT Values[4]);

		void (STDMETHODCALLTYPE *ClearDepthStencilView)(
			ID3D11DeviceContext *This,
			ID3D11DepthStencilView *pDepthStencilView,
			UINT ClearFlags,
			FLOAT Depth,
			UINT8 Stencil);

		void (STDMETHODCALLTYPE *GenerateMips)(
			ID3D11DeviceContext *This,
			ID3D11ShaderResourceView *pShaderResourceView);

		void (STDMETHODCALLTYPE *SetResourceMinLOD)(
			ID3D11DeviceContext *This,
			ID3D11Resource *pResource,
			FLOAT MinLOD);

		FLOAT (STDMETHODCALLTYPE *GetResourceMinLOD)(
			ID3D11DeviceContext *This,
			ID3D11Resource *pResource);

		void (STDMETHODCALLTYPE *ResolveSubresource)(
			ID3D11DeviceContext *This,
			ID3D11Resource *pDstResource,
			UINT DstSubresource,
			ID3D11Resource *pSrcResource,
			UINT SrcSubresource,
			DXGI_FORMAT Format);

		void (STDMETHODCALLTYPE *ExecuteCommandList)(
			ID3D11DeviceContext *This,
			ID3D11CommandList *pCommandList,
			WINBOOL RestoreContextState);

		void (STDMETHODCALLTYPE *HSSetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView *const *ppShaderResourceViews);

		void (STDMETHODCALLTYPE *HSSetShader)(
			ID3D11DeviceContext *This,
			ID3D11HullShader *pHullShader,
			ID3D11ClassInstance *const *ppClassInstances,
			UINT NumClassInstances);

		void (STDMETHODCALLTYPE *HSSetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState *const *ppSamplers);

		void (STDMETHODCALLTYPE *HSSetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer *const *ppConstantBuffers);

		void (STDMETHODCALLTYPE *DSSetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView *const *ppShaderResourceViews);

		void (STDMETHODCALLTYPE *DSSetShader)(
			ID3D11DeviceContext *This,
			ID3D11DomainShader *pDomainShader,
			ID3D11ClassInstance *const *ppClassInstances,
			UINT NumClassInstances);

		void (STDMETHODCALLTYPE *DSSetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState *const *ppSamplers);

		void (STDMETHODCALLTYPE *DSSetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer *const *ppConstantBuffers);

		void (STDMETHODCALLTYPE *CSSetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView *const *ppShaderResourceViews);

		void (STDMETHODCALLTYPE *CSSetUnorderedAccessViews)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumUAVs,
			ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,
			const UINT *pUAVInitialCounts);

		void (STDMETHODCALLTYPE *CSSetShader)(
			ID3D11DeviceContext *This,
			ID3D11ComputeShader *pComputeShader,
			ID3D11ClassInstance *const *ppClassInstances,
			UINT NumClassInstances);

		void (STDMETHODCALLTYPE *CSSetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState *const *ppSamplers);

		void (STDMETHODCALLTYPE *CSSetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer *const *ppConstantBuffers);

		void (STDMETHODCALLTYPE *VSGetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer **ppConstantBuffers);

		void (STDMETHODCALLTYPE *PSGetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView **ppShaderResourceViews);

		void (STDMETHODCALLTYPE *PSGetShader)(
			ID3D11DeviceContext *This,
			ID3D11PixelShader **ppPixelShader,
			ID3D11ClassInstance **ppClassInstances,
			UINT *pNumClassInstances);

		void (STDMETHODCALLTYPE *PSGetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState **ppSamplers);

		void (STDMETHODCALLTYPE *VSGetShader)(
			ID3D11DeviceContext *This,
			ID3D11VertexShader **ppVertexShader,
			ID3D11ClassInstance **ppClassInstances,
			UINT *pNumClassInstances);

		void (STDMETHODCALLTYPE *PSGetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer **ppConstantBuffers);

		void (STDMETHODCALLTYPE *IAGetInputLayout)(
			ID3D11DeviceContext *This,
			ID3D11InputLayout **ppInputLayout);

		void (STDMETHODCALLTYPE *IAGetVertexBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer **ppVertexBuffers,
			UINT *pStrides,
			UINT *pOffsets);

		void (STDMETHODCALLTYPE *IAGetIndexBuffer)(
			ID3D11DeviceContext *This,
			ID3D11Buffer **pIndexBuffer,
			DXGI_FORMAT *Format,
			UINT *Offset);

		void (STDMETHODCALLTYPE *GSGetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer **ppConstantBuffers);

		void (STDMETHODCALLTYPE *GSGetShader)(
			ID3D11DeviceContext *This,
			ID3D11GeometryShader **ppGeometryShader,
			ID3D11ClassInstance **ppClassInstances,
			UINT *pNumClassInstances);

		void (STDMETHODCALLTYPE *IAGetPrimitiveTopology)(
			ID3D11DeviceContext *This,
			D3D11_PRIMITIVE_TOPOLOGY *pTopology);

		void (STDMETHODCALLTYPE *VSGetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView **ppShaderResourceViews);

		void (STDMETHODCALLTYPE *VSGetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState **ppSamplers);

		void (STDMETHODCALLTYPE *GetPredication)(
			ID3D11DeviceContext *This,
			ID3D11Predicate **ppPredicate,
			WINBOOL *pPredicateValue);

		void (STDMETHODCALLTYPE *GSGetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView **ppShaderResourceViews);

		void (STDMETHODCALLTYPE *GSGetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState **ppSamplers);

		void (STDMETHODCALLTYPE *OMGetRenderTargets)(
			ID3D11DeviceContext *This,
			UINT NumViews,
			ID3D11RenderTargetView **ppRenderTargetViews,
			ID3D11DepthStencilView **ppDepthStencilView);

		void (STDMETHODCALLTYPE *OMGetRenderTargetsAndUnorderedAccessViews)(
			ID3D11DeviceContext *This,
			UINT NumRTVs,
			ID3D11RenderTargetView **ppRenderTargetViews,
			ID3D11DepthStencilView **ppDepthStencilView,
			UINT UAVStartSlot,
			UINT NumUAVs,
			ID3D11UnorderedAccessView **ppUnorderedAccessViews);

		void (STDMETHODCALLTYPE *OMGetBlendState)(
			ID3D11DeviceContext *This,
			ID3D11BlendState **ppBlendState,
			FLOAT BlendFactor[4],
			UINT *pSampleMask);

		void (STDMETHODCALLTYPE *OMGetDepthStencilState)(
			ID3D11DeviceContext *This,
			ID3D11DepthStencilState **ppDepthStencilState,
			UINT *pStencilRef);

		void (STDMETHODCALLTYPE *SOGetTargets)(
			ID3D11DeviceContext *This,
			UINT NumBuffers,
			ID3D11Buffer **ppSOTargets);

		void (STDMETHODCALLTYPE *RSGetState)(
			ID3D11DeviceContext *This,
			ID3D11RasterizerState **ppRasterizerState);

		void (STDMETHODCALLTYPE *RSGetViewports)(
			ID3D11DeviceContext *This,
			UINT *pNumViewports,
			D3D11_VIEWPORT *pViewports);

		void (STDMETHODCALLTYPE *RSGetScissorRects)(
			ID3D11DeviceContext *This,
			UINT *pNumRects,
			D3D11_RECT *pRects);

		void (STDMETHODCALLTYPE *HSGetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView **ppShaderResourceViews);

		void (STDMETHODCALLTYPE *HSGetShader)(
			ID3D11DeviceContext *This,
			ID3D11HullShader **ppHullShader,
			ID3D11ClassInstance **ppClassInstances,
			UINT *pNumClassInstances);

		void (STDMETHODCALLTYPE *HSGetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState **ppSamplers);

		void (STDMETHODCALLTYPE *HSGetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer **ppConstantBuffers);

		void (STDMETHODCALLTYPE *DSGetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView **ppShaderResourceViews);

		void (STDMETHODCALLTYPE *DSGetShader)(
			ID3D11DeviceContext *This,
			ID3D11DomainShader **ppDomainShader,
			ID3D11ClassInstance **ppClassInstances,
			UINT *pNumClassInstances);

		void (STDMETHODCALLTYPE *DSGetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState **ppSamplers);

		void (STDMETHODCALLTYPE *DSGetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer **ppConstantBuffers);

		void (STDMETHODCALLTYPE *CSGetShaderResources)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumViews,
			ID3D11ShaderResourceView **ppShaderResourceViews);

		void (STDMETHODCALLTYPE *CSGetUnorderedAccessViews)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumUAVs,
			ID3D11UnorderedAccessView **ppUnorderedAccessViews);

		void (STDMETHODCALLTYPE *CSGetShader)(
			ID3D11DeviceContext *This,
			ID3D11ComputeShader **ppComputeShader,
			ID3D11ClassInstance **ppClassInstances,
			UINT *pNumClassInstances);

		void (STDMETHODCALLTYPE *CSGetSamplers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumSamplers,
			ID3D11SamplerState **ppSamplers);

		void (STDMETHODCALLTYPE *CSGetConstantBuffers)(
			ID3D11DeviceContext *This,
			UINT StartSlot,
			UINT NumBuffers,
			ID3D11Buffer **ppConstantBuffers);

		void (STDMETHODCALLTYPE *ClearState)(
			ID3D11DeviceContext *This);

		void (STDMETHODCALLTYPE *Flush)(
			ID3D11DeviceContext *This);

		D3D11_DEVICE_CONTEXT_TYPE (STDMETHODCALLTYPE *GetType)(
			ID3D11DeviceContext *This);

		UINT (STDMETHODCALLTYPE *GetContextFlags)(
			ID3D11DeviceContext *This);

		HRESULT (STDMETHODCALLTYPE *FinishCommandList)(
			ID3D11DeviceContext *This,
			WINBOOL RestoreDeferredContextState,
			ID3D11CommandList **ppCommandList);

	} ID3D11DeviceContextVtbl;


	typedef struct ID3D11DeviceVtbl {
		BEGIN_INTERFACE

		/*** IUnknown methods ***/
		HRESULT (STDMETHODCALLTYPE *QueryInterface)(
			ID3D11Device *This,
			REFIID riid,
			void **ppvObject);

		ULONG (STDMETHODCALLTYPE *AddRef)(
			ID3D11Device *This);

		ULONG (STDMETHODCALLTYPE *Release)(
			ID3D11Device *This);

		/*** ID3D11Device methods ***/
		HRESULT (STDMETHODCALLTYPE *CreateBuffer)(
			ID3D11Device *This,
			const D3D11_BUFFER_DESC *pDesc,
			const D3D11_SUBRESOURCE_DATA *pInitialData,
			ID3D11Buffer **ppBuffer);

		HRESULT (STDMETHODCALLTYPE *CreateTexture1D)(
			ID3D11Device *This,
			const D3D11_TEXTURE1D_DESC *pDesc,
			const D3D11_SUBRESOURCE_DATA *pInitialData,
			ID3D11Texture1D **ppTexture1D);

		HRESULT (STDMETHODCALLTYPE *CreateTexture2D)(
			ID3D11Device *This,
			const D3D11_TEXTURE2D_DESC *pDesc,
			const D3D11_SUBRESOURCE_DATA *pInitialData,
			ID3D11Texture2D **ppTexture2D);

		HRESULT (STDMETHODCALLTYPE *CreateTexture3D)(
			ID3D11Device *This,
			const D3D11_TEXTURE3D_DESC *pDesc,
			const D3D11_SUBRESOURCE_DATA *pInitialData,
			ID3D11Texture3D **ppTexture3D);

		HRESULT (STDMETHODCALLTYPE *CreateShaderResourceView)(
			ID3D11Device *This,
			ID3D11Resource *pResource,
			const D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc,
			ID3D11ShaderResourceView **ppSRView);

		HRESULT (STDMETHODCALLTYPE *CreateUnorderedAccessView)(
			ID3D11Device *This,
			ID3D11Resource *pResource,
			const D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc,
			ID3D11UnorderedAccessView **ppUAView);

		HRESULT (STDMETHODCALLTYPE *CreateRenderTargetView)(
			ID3D11Device *This,
			ID3D11Resource *pResource,
			const D3D11_RENDER_TARGET_VIEW_DESC *pDesc,
			ID3D11RenderTargetView **ppRTView);

		HRESULT (STDMETHODCALLTYPE *CreateDepthStencilView)(
			ID3D11Device *This,
			ID3D11Resource *pResource,
			const D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc,
			ID3D11DepthStencilView **ppDepthStencilView);

		HRESULT (STDMETHODCALLTYPE *CreateInputLayout)(
			ID3D11Device *This,
			const D3D11_INPUT_ELEMENT_DESC *pInputElementDescs,
			UINT NumElements,
			const void *pShaderBytecodeWithInputSignature,
			SIZE_T BytecodeLength,
			ID3D11InputLayout **ppInputLayout);

		HRESULT (STDMETHODCALLTYPE *CreateVertexShader)(
			ID3D11Device *This,
			const void *pShaderBytecode,
			SIZE_T BytecodeLength,
			ID3D11ClassLinkage *pClassLinkage,
			ID3D11VertexShader **ppVertexShader);

		HRESULT (STDMETHODCALLTYPE *CreateGeometryShader)(
			ID3D11Device *This,
			const void *pShaderBytecode,
			SIZE_T BytecodeLength,
			ID3D11ClassLinkage *pClassLinkage,
			ID3D11GeometryShader **ppGeometryShader);

		HRESULT (STDMETHODCALLTYPE *CreateGeometryShaderWithStreamOutput)(
			ID3D11Device *This,
			const void *pShaderBytecode,
			SIZE_T BytecodeLength,
			const D3D11_SO_DECLARATION_ENTRY *pSODeclaration,
			UINT NumEntries,
			const UINT *pBufferStrides,
			UINT NumStrides,
			UINT RasterizedStream,
			ID3D11ClassLinkage *pClassLinkage,
			ID3D11GeometryShader **ppGeometryShader);

		HRESULT (STDMETHODCALLTYPE *CreatePixelShader)(
			ID3D11Device *This,
			const void *pShaderBytecode,
			SIZE_T BytecodeLength,
			ID3D11ClassLinkage *pClassLinkage,
			ID3D11PixelShader **ppPixelShader);

		HRESULT (STDMETHODCALLTYPE *CreateHullShader)(
			ID3D11Device *This,
			const void *pShaderBytecode,
			SIZE_T BytecodeLength,
			ID3D11ClassLinkage *pClassLinkage,
			ID3D11HullShader **ppHullShader);

		HRESULT (STDMETHODCALLTYPE *CreateDomainShader)(
			ID3D11Device *This,
			const void *pShaderBytecode,
			SIZE_T BytecodeLength,
			ID3D11ClassLinkage *pClassLinkage,
			ID3D11DomainShader **ppDomainShader);

		HRESULT (STDMETHODCALLTYPE *CreateComputeShader)(
			ID3D11Device *This,
			const void *pShaderBytecode,
			SIZE_T BytecodeLength,
			ID3D11ClassLinkage *pClassLinkage,
			ID3D11ComputeShader **ppComputeShader);

		HRESULT (STDMETHODCALLTYPE *CreateClassLinkage)(
			ID3D11Device *This,
			ID3D11ClassLinkage **ppLinkage);

		HRESULT (STDMETHODCALLTYPE *CreateBlendState)(
			ID3D11Device *This,
			const D3D11_BLEND_DESC *pBlendStateDesc,
			ID3D11BlendState **ppBlendState);

		HRESULT (STDMETHODCALLTYPE *CreateDepthStencilState)(
			ID3D11Device *This,
			const D3D11_DEPTH_STENCIL_DESC *pDepthStencilDesc,
			ID3D11DepthStencilState **ppDepthStencilState);

		HRESULT (STDMETHODCALLTYPE *CreateRasterizerState)(
			ID3D11Device *This,
			const D3D11_RASTERIZER_DESC *pRasterizerDesc,
			ID3D11RasterizerState **ppRasterizerState);

		HRESULT (STDMETHODCALLTYPE *CreateSamplerState)(
			ID3D11Device *This,
			const D3D11_SAMPLER_DESC *pSamplerDesc,
			ID3D11SamplerState **ppSamplerState);

		HRESULT (STDMETHODCALLTYPE *CreateQuery)(
			ID3D11Device *This,
			const D3D11_QUERY_DESC *pQueryDesc,
			ID3D11Query **ppQuery);

		HRESULT (STDMETHODCALLTYPE *CreatePredicate)(
			ID3D11Device *This,
			const D3D11_QUERY_DESC *pPredicateDesc,
			ID3D11Predicate **ppPredicate);

		HRESULT (STDMETHODCALLTYPE *CreateCounter)(
			ID3D11Device *This,
			const D3D11_COUNTER_DESC *pCounterDesc,
			ID3D11Counter **ppCounter);

		HRESULT (STDMETHODCALLTYPE *CreateDeferredContext)(
			ID3D11Device *This,
			UINT ContextFlags,
			ID3D11DeviceContext **ppDeferredContext);

		HRESULT (STDMETHODCALLTYPE *OpenSharedResource)(
			ID3D11Device *This,
			HANDLE hResource,
			REFIID ReturnedInterface,
			void **ppResource);

		HRESULT (STDMETHODCALLTYPE *CheckFormatSupport)(
			ID3D11Device *This,
			DXGI_FORMAT Format,
			UINT *pFormatSupport);

		HRESULT (STDMETHODCALLTYPE *CheckMultisampleQualityLevels)(
			ID3D11Device *This,
			DXGI_FORMAT Format,
			UINT SampleCount,
			UINT *pNumQualityLevels);

		void (STDMETHODCALLTYPE *CheckCounterInfo)(
			ID3D11Device *This,
			D3D11_COUNTER_INFO *pCounterInfo);

		HRESULT (STDMETHODCALLTYPE *CheckCounter)(
			ID3D11Device *This,
			const D3D11_COUNTER_DESC *pDesc,
			D3D11_COUNTER_TYPE *pType,
			UINT *pActiveCounters,
			LPSTR szName,
			UINT *pNameLength,
			LPSTR szUnits,
			UINT *pUnitsLength,
			LPSTR szDescription,
			UINT *pDescriptionLength);

		HRESULT (STDMETHODCALLTYPE *CheckFeatureSupport)(
			ID3D11Device *This,
			D3D11_FEATURE Feature,
			void *pFeatureSupportData,
			UINT FeatureSupportDataSize);

		HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
			ID3D11Device *This,
			REFGUID guid,
			UINT *pDataSize,
			void *pData);

		HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
			ID3D11Device *This,
			REFGUID guid,
			UINT DataSize,
			const void *pData);

		HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
			ID3D11Device *This,
			REFGUID guid,
			const IUnknown *pData);

		D3D_FEATURE_LEVEL (STDMETHODCALLTYPE *GetFeatureLevel)(
			ID3D11Device *This);

		UINT (STDMETHODCALLTYPE *GetCreationFlags)(
			ID3D11Device *This);

		HRESULT (STDMETHODCALLTYPE *GetDeviceRemovedReason)(
			ID3D11Device *This);

		void (STDMETHODCALLTYPE *GetImmediateContext)(
			ID3D11Device *This,
			ID3D11DeviceContext **ppImmediateContext);

		HRESULT (STDMETHODCALLTYPE *SetExceptionMode)(
			ID3D11Device *This,
			UINT RaiseFlags);

		UINT (STDMETHODCALLTYPE *GetExceptionMode)(
			ID3D11Device *This);

		END_INTERFACE
	} ID3D11DeviceVtbl;


	HRESULT DXGIGetAdapter( IDXGIAdapter **pAdapter );
	HRESULT D3D11CreateDevice(
		IDXGIAdapter            *pAdapter,
		enum D3D_DRIVER_TYPE         DriverType,
		HMODULE                 Software,
		UINT                    Flags,
		const enum D3D_FEATURE_LEVEL *pFeatureLevels,
		UINT                    FeatureLevels,
		UINT                    SDKVersion,
		ID3D11Device            **ppDevice,
		enum D3D_FEATURE_LEVEL  *pFeatureLevel,
		ID3D11DeviceContext     **ppImmediateContext
	);
	
	struct ID3D11Device
	{
		CONST_VTBL ID3D11DeviceVtbl* lpVtbl;
	};


	typedef struct ID3D11ResourceVtbl {
		/*** IUnknown methods ***/
		HRESULT (STDMETHODCALLTYPE *QueryInterface)(
			ID3D11Resource *This,
			REFIID riid,
			void **ppvObject);

		ULONG (STDMETHODCALLTYPE *AddRef)(
			ID3D11Resource *This);

		ULONG (STDMETHODCALLTYPE *Release)(
			ID3D11Resource *This);

		/*** ID3D11DeviceChild methods ***/
		void (STDMETHODCALLTYPE *GetDevice)(
			ID3D11Resource *This,
			ID3D11Device **ppDevice);

		HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
			ID3D11Resource *This,
			REFGUID guid,
			UINT *pDataSize,
			void *pData);

		HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
			ID3D11Resource *This,
			REFGUID guid,
			UINT DataSize,
			const void *pData);

		HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
			ID3D11Resource *This,
			REFGUID guid,
			const IUnknown *pData);

		/*** ID3D11Resource methods ***/
		void (STDMETHODCALLTYPE *GetType)(
			ID3D11Resource *This,
			D3D11_RESOURCE_DIMENSION *pResourceDimension);

		void (STDMETHODCALLTYPE *SetEvictionPriority)(
			ID3D11Resource *This,
			UINT EvictionPriority);

		UINT (STDMETHODCALLTYPE *GetEvictionPriority)(
			ID3D11Resource *This);

	} ID3D11ResourceVtbl;

	struct ID3D11Resource {
		ID3D11ResourceVtbl* lpVtbl;
	};


	typedef struct ID3D11ShaderResourceView ID3D11ShaderResourceView;
	
	typedef struct ID3D11ShaderResourceViewVtbl {

		/*** IUnknown methods ***/
		HRESULT (STDMETHODCALLTYPE *QueryInterface)(
			ID3D11ShaderResourceView *This,
			REFIID riid,
			void **ppvObject);

		ULONG (STDMETHODCALLTYPE *AddRef)(
			ID3D11ShaderResourceView *This);

		ULONG (STDMETHODCALLTYPE *Release)(
			ID3D11ShaderResourceView *This);

		/*** ID3D11DeviceChild methods ***/
		void (STDMETHODCALLTYPE *GetDevice)(
			ID3D11ShaderResourceView *This,
			ID3D11Device **ppDevice);

		HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
			ID3D11ShaderResourceView *This,
			REFGUID guid,
			UINT *pDataSize,
			void *pData);

		HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
			ID3D11ShaderResourceView *This,
			REFGUID guid,
			UINT DataSize,
			const void *pData);

		HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
			ID3D11ShaderResourceView *This,
			REFGUID guid,
			const IUnknown *pData);

		/*** ID3D11View methods ***/
		void (STDMETHODCALLTYPE *GetResource)(
			ID3D11ShaderResourceView *This,
			ID3D11Resource **ppResource);

		/*** ID3D11ShaderResourceView methods ***/
		void (STDMETHODCALLTYPE *GetDesc)(
			ID3D11ShaderResourceView *This,
			D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc);
	} ID3D11ShaderResourceViewVtbl;

	struct ID3D11ShaderResourceView {
		ID3D11ShaderResourceViewVtbl* lpVtbl;
	};



	DEFINE_GUID(IID_ID3D11Texture2D, 0x6f15aaf2, 0xd208, 0x4e89, 0x9a,0xb4, 0x48,0x95,0x35,0xd3,0x4f,0x9c);
	enum D3D_FEATURE_LEVEL pFeatureLevels[1] = { D3D_FEATURE_LEVEL_11_0 };
	enum D3D_FEATURE_LEVEL pOutFeatureLevels;
	
